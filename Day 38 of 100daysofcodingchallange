#Problem link:-https://practice.geeksforgeeks.org/problem-of-the-day
#Problem link;-https://leetcode.com/problems/minimum-cost-to-cut-a-stick/

#geekscode:
/* struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

//Function to find the data of nth node from the end of a linked list.
class Solution{
public:
    int getNthFromLast(Node *head, int n)
{

       int totalnode=0;
       Node *p = head;
       while(p) {
           p=p->next;
           totalnode++;
       }
       p=head;
       while(p) {
           totalnode--;
           if(totalnode==n-1) {
               return p->data;
           }
           p=p->next;
       }
       return -1;
}
};


#leetcode:
class Solution {
    private int memoizationUtil(int[] nums, int left, int right, int[][] dp) {
		if (right - left <= 1) {
			return 0;
		}
		if (dp[left][right] != -1) {
			return dp[left][right];
		}
		dp[left][right] = Integer.MAX_VALUE;
		for (int k = left + 1; k < right; k++) {
			dp[left][right] = Math.min(dp[left][right], memoizationUtil(nums, left, k, dp)
					+ memoizationUtil(nums, k, right, dp) + nums[right] - nums[left]);
		}
		return dp[left][right];
	}

	private int memoization(int[] arr, int n) {
		int[] nums = new int[arr.length + 2];
		nums[0] = 0;
		nums[arr.length + 1] = n;
		for (int i = 0; i < arr.length; i++) {
			nums[i + 1] = arr[i];
		}
		int[][] dp = new int[nums.length + 1][nums.length + 1];
		for (int[] row : dp) {
			Arrays.fill(row, -1);
		}
		Arrays.sort(nums);
		return memoizationUtil(nums, 0, nums.length - 1, dp);
	}

	private int tabulationUtil(int nums[], int n) {
		int dp[][] = new int[nums.length][nums.length];
		for (int left = nums.length - 1; left >= 0; --left) {
			for (int right = left + 1; right < nums.length; ++right) {
				{
					for (int k = left + 1; k < right; ++k)
						dp[left][right] = Math.min(dp[left][right] == 0 ? Integer.MAX_VALUE : dp[left][right],
								nums[right] - nums[left] + dp[left][k] + dp[k][right]);
				}
			}
		}
		return dp[0][nums.length - 1];
	}

	private int tabulation(int arr[], int n) {
		int[] nums = new int[arr.length + 2];
		nums[0] = 0;
		nums[arr.length + 1] = n;
		for (int i = 0; i < arr.length; i++) {
			nums[i + 1] = arr[i];
		}
		Arrays.sort(nums);
		return tabulationUtil(nums, nums.length);
	}

	public int minCost(int n, int[] cuts) {
		// return tabulation(cuts, n);
        return memoization(cuts, n);
	}
    
}
