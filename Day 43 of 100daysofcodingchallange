Problem link:-https://practice.geeksforgeeks.org/problems/santa-banta2814/1

geekscode:-
class Solution{
    vector<int> primes;
    int n{1000001};
    int size{0};
public:
    void precompute(){
        bool prime[n + 1];
        memset(prime, true, sizeof(prime));
      
        for (int p = 2; p * p <= n; p++) {
            // If prime[p] is not changed, then it is a prime
            if (prime[p] == true) {
                // Update all multiples of p greater than or
                // equal to the square of it numbers which are
                // multiple of p and are less than p^2 are
                // already been marked.
                for (int i = p * p; i <= n; i += p)
                    prime[i] = false;
            }
        }
      
        // Print all prime numbers
        for (int p = 2; p <= n; p++){
            if (prime[p])
                primes.push_back(p);
        }
    }
    void dfs(vector<int> adj[], vector<int>& vis, int node){
        vis[node] = 1;
        
        for(const auto& x : adj[node]){
            if(!vis[x]){
                ++size;
                dfs(adj, vis, x);
            }
        }
    }
    int helpSanta(int n, int m, vector<vector<int>> &g){
        // Code here
        int i, j;
        ++n;
        vector<int> adj[n];
        for(i = 1;i<n;i++){
            int u = i;
           for(const auto& x : g[i]){
               int v = x;
               adj[u].push_back(v);
                adj[v].push_back(u);
           }
        }

        vector<int> vis(n, 0);
        int maxsize{0};
        for(i = 1;i<n;i++){
            if(!vis[i] && adj[i].size()){
                size = 1;
                dfs(adj, vis, i);
                maxsize = max(maxsize, size);
            }
        }
        
        if(maxsize == 0){
            return -1;
        }
        return primes[maxsize-1];
    }
};

leetcode;-
#define ll long long int
class Solution {
    public:
    void dfs(vector<vector<int>> &gr,vector<bool> &visited,int &c,int &i) {
        visited[i]=true;
        c++;
        for(int j=0;j<gr[i].size();j++) {
            if(!visited[gr[i][j]])
                dfs(gr,visited,c,gr[i][j]);   
        }
    }

    int maximumDetonation(vector<vector<int>>& bombs) {

        int n=bombs.size();
        vector<vector<int> > gr(n);
        for(int i=0;i<n;i++) {
            ll x1,y1,r1;
            x1=bombs[i][0];
            y1=bombs[i][1];
            r1=bombs[i][2];
            for(int j=0;j<n;j++) {
                if(i!=j) {
                    ll x,y;
                    x=abs(x1-bombs[j][0]);
                    y=abs(y1-bombs[j][1]);
                    if(x*x+y*y<=r1*r1)
                        gr[i].push_back(j);
                }
            }
        }

        int ans=INT_MIN;
        for(int i=0;i<n;i++) {
            int c=0;
            vector<bool> visited(n,false);
            dfs(gr,visited,c,i);
            ans=max(ans,c);
        }

        return ans;
    }
};
