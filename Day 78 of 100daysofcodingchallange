Geeks Problem Link;- https://practice.geeksforgeeks.org/problems/find-nth-element-of-spiral-matrix/1
Leet Problem Link:- https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/

Geekscode;-
class Solution

{
    public:
    /*You are required to complete this method*/
    int findK(int a[MAX][MAX],int n,int m,int k)
    {
 		int rl=0,ru=n-1,cu=m-1,cl=0,cnt=0;
 		while(cnt != n*m){
 		   for(int i=cl;i<=cu;i++){
 		       cnt++;
 		       if(cnt==k)return a[rl][i];
 		   } 
 		   rl++;
 		   for(int i=rl;i<=ru;i++){
 		       cnt++;
 		       if(cnt==k)return a[i][cu];
 		   } 
 		   cu--;
 		   for(int i=cu;i>=cl;i--){
 		       cnt++;
 		       if(cnt==k)return a[ru][i];
 		   } 
 		   ru--;
 		    for(int i=ru;i>=rl;i--){
 		       cnt++;
 		       if(cnt==k)return a[i][cl];
 		   } 
 		   cl++;
 		}
    }
};
Leetcode;-
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ans = new ArrayList<>();
        Map<Integer, TreeNode> parent = new HashMap<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode top = queue.poll();

                if (top.left != null) {
                    parent.put(top.left.val, top);
                    queue.offer(top.left);
                }

                if (top.right != null) {
                    parent.put(top.right.val, top);
                    queue.offer(top.right);
                }
            }
        }

        Map<Integer, Integer> visited = new HashMap<>();
        queue.offer(target);
        while (k > 0 && !queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                TreeNode top = queue.poll();

                visited.put(top.val, 1);

                if (top.left != null && !visited.containsKey(top.left.val)) {
                    queue.offer(top.left);
                }

                if (top.right != null && !visited.containsKey(top.right.val)) {
                    queue.offer(top.right);
                }

                if (parent.containsKey(top.val) && !visited.containsKey(parent.get(top.val).val)) {
                    queue.offer(parent.get(top.val));
                }
            }

            k--;
        }

        while (!queue.isEmpty()) {
            ans.add(queue.poll().val);
        }
        return ans;
    }
}
