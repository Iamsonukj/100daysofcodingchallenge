Geeks Problem Link:- https://practice.geeksforgeeks.org/problems/implement-two-stacks-in-an-array/1
Leet Problem Link:- https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/description/

//Geekscode:-

class twoStacks
{
    int *arr;
    int size;
    int top1, top2;

public:
    twoStacks(int n = 100)
    {
        size = n;
        arr = new int[n];
        top1 = -1;
        top2 = size;
    }

    void push1(int x)
    {
        if (top1 + 1 == top2)
        {
            cout << "-1"; //stack overflow
            return;
        }
        arr[++top1] = x;
    }

    void push2(int x)
    {
        if (top1 + 1 == top2)
        {
            cout << "-1"; //stack overflow
            return;
        }
        arr[--top2] = x;
    }

    int pop1()
    {
        if (top1 == -1)
        {

            return -1; // stack underflow
        }
        return arr[top1--];
    }

    int pop2()
    {
        if (top2 == size)
        {
            return -1; // stack underflow
        }
        return arr[top2++];
    }
};
//leetcode;-
class Solution {
    public int longestSubsequence(int[] nums, int difference) {
        Map<Integer, Integer> dp = new HashMap<>();
        int max_length = 1;

        for (int num : nums) {
            if (dp.containsKey(num - difference)) {
                dp.put(num, dp.get(num - difference) + 1);
            } else {
                dp.put(num, 1);
            }

            max_length = Math.max(max_length, dp.get(num));
        }

        return max_length;
    }
}
