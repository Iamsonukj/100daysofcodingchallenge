Geeks Problem Link;- https://practice.geeksforgeeks.org/problems/reverse-a-linked-list-in-groups-of-given-size/1
Leet Problem Link;- https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/

/////Geekscode;-

/*
  Reverse a linked list
  The input list will have at least one element  
  Return the node which points to the head of the new LinkedList
  Node is defined as 
    struct node
    {
        int data;
        struct node* next;
    
        node(int x){
            data = x;
            next = NULL;
        }
    
    }*head;
*/

class Solution
{
    public:
    struct node *reverse (struct node *head, int k)
    { 
        // Complete this method
        
        //edge cases
        if(head==NULL || !head->next) return head;
        
        node* rd=NULL;
        node *temp=head;
        for(int i=0;temp && i<k; i++){
            temp=temp->next;
        }
        
        rd=reverse(temp,k);
        
        node* prev=rd;
        node* cur=head;
        node* nex=head->next;
        
        while(nex!=temp){
            cur->next=prev;
            prev=cur;
            cur=nex;
            nex=nex->next;
        }
        
        cur->next=prev;
        return cur;
    }
};

// Leetcode;-

class Solution {
    public int findNumberOfLIS(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;

        int[] dp = new int[n]; 
        int[] count = new int[n];
        Arrays.fill(dp, 1);
        Arrays.fill(count, 1);

        int maxLength = 1; 

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    if (dp[j] + 1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    } else if (dp[j] + 1 == dp[i]) {
                        count[i] += count[j];
                    }
                }
            }
            maxLength = Math.max(maxLength, dp[i]);
        }

        int result = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] == maxLength) {
                result += count[i];
            }
        }

        return result;
    }
}
